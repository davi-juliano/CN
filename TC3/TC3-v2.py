{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"TC3-v2.py","provenance":[],"private_outputs":true,"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"qcGR2OD1I-BE","colab_type":"text"},"source":["# **Parte 1 - ex 1**"]},{"cell_type":"code","metadata":{"id":"2wa13k2UHRyS","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","n = 4\n","A = np.array([[1., -1, 0, 5],[3, -2, 1, -1],[1, 1, 9, 4],[1, -7, 2, 3]])\n","b = np.array([18., 8, 47, 32])\n","x0 = np.array([0.0, -2, 4, 3])\n","x1 = np.zeros((n,), dtype = float)\n","\n","\n","for cs in range(1000):\n","  for i in range(n):\n","    x1[i] = b[i]\n","    for j in range(n):\n","      if i != j:\n","        x1[i] -= A[i,j]*x0[j]\n","    x1[i] /= A[i,i]\n","  if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","    print(\"Método diverge\")\n","    break\n","  if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","    print(x1)\n","    print(cs+1)\n","    break\n","  else:  \n","    x0 = np.copy(x1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JoXuLoCFKitE","colab_type":"text"},"source":["# **Parte 1 - ex 2**"]},{"cell_type":"code","metadata":{"id":"BvsshGTTJbZs","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","n = 3\n","A = np.array([[1.0, 1.0, 1.0],[2.0, 3.0, 5.0],[1.0, 1.0, 2.0]])\n","b = np.array([400.0, 1500.0, 600.0])\n","x0 = np.array([0.,0,0])\n","x1 = np.zeros((n,), dtype = float)\n","\n","for cs in range(1000):\n","  for i in range(n):\n","    x1[i] = b[i]\n","    for j in range(n):\n","      if i != j:\n","        x1[i] -= A[i,j]*x0[j]\n","    x1[i] /= A[i,i]\n","  if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","    print(\"Método diverge\")\n","    break\n","  if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","    print(x1)\n","    print(cs+1)\n","    break\n","  else:  \n","    x0 = np.copy(x1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gTN0nfXeI03h","colab_type":"text"},"source":["# **Parte 2 - ex 1**"]},{"cell_type":"code","metadata":{"id":"Osh9J6hnHXsD","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","n = 4\n","A = np.array([[1., -1, 0, 5],[3, -2, 1, -1],[1, 1, 9, 4],[1, -7, 2, 3]])\n","b = np.array([18., 8, 47, 32])\n","x0 = np.array([0.0, 0, 0, 0])\n","x1 = np.copy(x0)\n","\n","\n","for cs in range(1000):\n","  for i in range(n):\n","    x1[i] = b[i]\n","    for j in range(n):\n","      if i != j:\n","        x1[i] -= A[i,j]*x1[j]\n","    x1[i] /= A[i,i]\n","  if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","    print(\"Método diverge\")\n","    break\n","  if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","    print(x1)\n","    print(cs+1)\n","    break\n","  else:  \n","    x0 = np.copy(x1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"26ZC9jxoKsbn","colab_type":"text"},"source":["# **Parte 2 - ex 2**"]},{"cell_type":"code","metadata":{"id":"S-1cum3oJPeO","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","n = 3\n","A = np.array([[1.0, 1.0, 1.0],[2.0, 3.0, 5.0],[1.0, 1.0, 2.0]])\n","b = np.array([400.0, 1500.0, 600.0])\n","x0 = np.array([0.0,0,0])\n","x1 = np.copy(x0)\n","\n","for cs in range(1000):\n","  for i in range(n):\n","    x1[i] = b[i]\n","    for j in range(n):\n","      if i != j:\n","        x1[i] -= A[i,j]*x1[j]\n","    x1[i] /= A[i,i]\n","  if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","    print(\"Método diverge\")\n","    break\n","  if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","    print(x1)\n","    print(cs+1)\n","    break\n","  else:  \n","    x0 = np.copy(x1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VDjHBn1Qx6GO","colab_type":"text"},"source":["# **Parte 3 - ex 1**"]},{"cell_type":"code","metadata":{"id":"opi8F496yr47","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def metodoLagrange(A, ordem, X):\n","  \n","  P = 0\n","\n","  for i in range(ordem+1):\n","    pDif1 = 1\n","    pDif2 = 1\n","    for j in range(ordem+1):\n","      if(i != j):\n","        pDif1 *= (X-A[0,j])\n","        pDif2 *= (A[0,i]-A[0,j])\n","    L = pDif1 / pDif2\n","    P += A[1,i]*L\n","    \n","  print('x: ', X, 'y: ', P)\n","  return P   \n","      \n","A = np.array([[5, 10, 15, 20, 30, 40], [1226, 1498, 1822, 2138, 2662, 2840]])\n","\n","x = np.copy(A[0])\n","y = np.copy(A[1])\n","\n","inc = 12.0\n","x = np.append(x, inc)\n","y = np.append(y, metodoLagrange(A, 5, inc))\n","\n","inc = 25.0\n","x = np.append(x, inc)\n","y = np.append(y, metodoLagrange(A, 5, inc))\n","\n","inc = 38.0\n","x = np.append(x, inc)\n","y = np.append(y, metodoLagrange(A, 5, inc))\n","\n","x = np.sort(x)\n","y = np.sort(y)\n","\n","plt.plot(x, y, 'b', label='3.1', color='r')\n","plt.plot(x, y, 'p', label='3.1', color='b')\n","\n","plt.savefig(\"ex1.png\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Twl0d6DizGTr","colab_type":"text"},"source":["# **Parte 3 - ex 2**"]},{"cell_type":"code","metadata":{"id":"3RxcUzdLzP0Z","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def metodoLagrange(A, ordem, X):\n","  \n","  P = 0\n","\n","  for i in range(ordem+1):\n","    pDif1 = 1\n","    pDif2 = 1\n","    for j in range(ordem+1):\n","      if(i != j):\n","        pDif1 *= (X-A[0,j])\n","        pDif2 *= (A[0,i]-A[0,j])\n","    L = pDif1 / pDif2\n","    P += A[1,i]*L\n","    \n","  print('x: ', X, 'y: ', P)\n","  return P   \n","      \n","A = np.array([[1.0, 2, 3, 4, 5, 6], [14.5, 19.5, 30.5, 53.5, 94.5, 159.5]])\n","\n","x = np.copy(A[0])\n","y = np.copy(A[1])\n","\n","inc = 4.5\n","x = np.append(x, inc)\n","y = np.append(y, metodoLagrange(A, 5, inc))\n","\n","x = np.sort(x)\n","y = np.sort(y)\n","\n","plt.plot(x, y, 'b', label='3.1', color='r')\n","plt.plot(x, y, 'p', label='3.1', color='b')\n","\n","plt.savefig(\"ex2.png\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x0j7FIE-0NCB","colab_type":"text"},"source":["# **Parte 3 - ex 3**"]},{"cell_type":"code","metadata":{"id":"vz2vek5y0O0a","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def metodoLagrange(A, ordem, X):\n","  \n","  P = 0\n","\n","  for i in range(ordem+1):\n","    pDif1 = 1\n","    pDif2 = 1\n","    for j in range(ordem+1):\n","      if(i != j):\n","        pDif1 *= (X-A[0,j])\n","        pDif2 *= (A[0,i]-A[0,j])\n","    L = pDif1 / pDif2\n","    P += A[1,i]*L\n","  \n","  if X == 4:\n","    print('x: ', X, 'y: ', P)\n","  return P   \n","      \n","A = np.array([[2.0, 4.25, 5.25, 7.81, 9.20, 10.60], [7.2, 7.1, 6.0, 5.0, 3.5, 5.0]])\n","\n","x = np.copy(A[0])\n","y = []\n","\n","inc = 4\n","x = np.append(x, inc)\n","x = np.sort(x)\n","for i in x:\n","  y = np.append(y, metodoLagrange(A, 5, i))\n","\n","\n","print(x, y)\n","\n","plt.plot(x, y, 'b', label='3.1', color='r')\n","plt.plot(x, y, 'p', label='3.1', color='b')\n","\n","plt.savefig(\"ex3.png\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Btf9i_m0DiW3","colab_type":"code","colab":{}},"source":["import numpy as np\n","from random import randint\n","\n","def jacobi (A, b, x0, n):\n","  x1 = np.zeros((n,), dtype = float)\n","  for cs in range(1000):\n","    for i in range(n):\n","      x1[i] = b[i]\n","      for j in range(n):\n","        if i != j:\n","          x1[i] -= A[i,j]*x0[j]\n","      \n","      x1[i] /= A[i,i]\n","    if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","      print(\"Método de Jacobi diverge\")\n","      break\n","    if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","      print(\"Jacobi\", x1)\n","      print(cs+1)\n","      break\n","    else:  \n","      x0 = np.copy(x1)\n","\n","def seidel (A, b, x0, n):\n","  x1 = np.copy(x0)\n","  for cs in range(1000):\n","    for i in range(n):\n","      x1[i] = b[i]\n","      for j in range(n):\n","        if i != j:\n","          x1[i] -= (A[i,j]*x1[j])\n","      x1[i] /= A[i,i]\n","    if (np.linalg.norm(x1-x0,np.inf)) > 1000:\n","      print(\"Método de Seidel diverge\")\n","      break\n","    if (np.linalg.norm(x1-x0,np.inf) < 10**(-6)): \n","      print(\"Seidel\", x1)\n","      print(cs+1)\n","      break\n","    else:  \n","      x0 = np.copy(x1)\n","\n","n = 1000\n","b = np.random.rand(n,1) * 10\n","\n","passou = 0\n","cont = 0\n","A = np.zeros((n,n), dtype = float)\n","while passou != (n-1): \n","  soma = 0\n","  inseridos = 0\n","\n","  insere = np.random.rand(1,1) * 100\n","  A[passou,passou] = insere\n","\n","  while inseridos < 150:\n","    insere = np.random.rand(1,1) * 100\n","    k = randint(0, 999)\n","\n","    if((soma + insere) < A[passou,passou]) and (k != passou):\n","      A[passou,k] = insere\n","      inseridos += 1 \n","  passou += 1\n","\n","x0 = np.random.rand(n,1) * 100\n","jacobi (A, b, x0, n)\n","seidel (A, b, x0, n)\n","\n","x0 = np.random.rand(n,1) * 100\n","jacobi (A, b, x0, n)\n","seidel (A, b, x0, n)\n","\n","x0 = np.random.rand(n,1) * 100\n","jacobi (A, b, x0, n)\n","seidel (A, b, x0, n)"],"execution_count":0,"outputs":[]}]}